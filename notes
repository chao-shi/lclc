037: Backtracking optimization, try smallest candidates set at current stage

038: Use of anchor pointer

039: Backtracking sorting optimization, try big candidate first, break early
No state crossing, 
Enter function with nums=[3, 5], i = 10, sumv = 8
Enter later with nums=[4, 4], i = 10, sumv = 8

040: Trick, what is unique combination. Needs to convert to counter
Can do same trick of backtracking like 039
If you don't want to count, see the smart trick on dp2.py
If you decide to use cands[j] and cands[j] == cands[j-1], better use the 
pre-sequence which ends with cands[j-1], this prompt us to store two arrays

041: n len, max missing is n + 1, for < 0, just make it n + 1

042: mid point

043: init case for regex len(s) = 0 len(p) != 0

044: [a, b] range, reachable by at least v steps, next range is [b + 1, ???]

051: smart queen projection on row 1 for diagonal case

053: thought on divide/conquer still O(N)

054: forget the trick a lot

055: forget the trick a lot

060: maintain bucket size from (n-1) ! to 1, each time pop k / bucket_size
smart solution to use pop

061: join loop and cut the ribbon

062: [i][j] = [i][j-1] + [i-1][j], takes upper and left, go from left to right
     [i][j] = [i-1][j] + [i-1][j-1] , takes upper and upper left, go from right to left to process

063: smart to mark cnt[i][j] = 0 if [i][j] is block. Smart also how to process row one just like others
hidden first row

064: hidden rows does not work here, min(0, ?) will screw up, not sum(0, ?) like 62 and 63

065: regex

066: carry bit is 1

069: Newton approach

071: corner case // and /../

073: first_col_zero, first_row_zero

075: Multiple start points or dutch flag sorting

076: sliding window problem, left pointer of window cannot be moved further right, if moved, it will cause match count
decrease. This will have the smallest window of ending j with largest match

082, 083: retracting deletion

084: for each i, check the max histogram which is bucketed by this one. (Shortest bucket rule)

085: i is the like the baseline of histogram

087: sort, check same and recursion

088: One array has extra space to hold everything
the given array length is part of input

090: without counting first, idea like this below
For dup elements (second or after), only insert after the new subset you got from last round (up to last number)
For other numbers, insert into any subset in any round 
https://leetcode.com/problems/subsets-ii/discuss/30137/Simple-iterative-solution
[1, 2, 2]
start with [[]]
after 1:   [[], [1]]
after 2:   [[], [1], [2], [1, 2]]
after 2:   this 2 is special, it should only add to the last round newly added subsets
           only [2] and [1, 2] can be extended
           [[], [1], [2], [1, 2], [2, 2], [1, 2, 2]]
The starting j is zero if cur number is different from previous

092: smart rotating, for [2, 5] is to revert, 1 is the anchor. Everytime takes the new last element to insert right after the anchor.
This keeps the LL in good form

093: parse integer with leading zero

095: range DP, iterate on j
DP can also return shapes and fill values later

097: enumerate all combinations O(N2)
DP m[i][j], if s1[:i] and s2[:j] can form s3[:i+j]
Good question
careful of edge cases

098: cap window of min/max
[SIMILAR] Q270, use cap of min_int and max_int

099: inorder and check sudden drop. How swap2 are blindly overwritten

100: none checking

101: is mirror

102: level = [child for p in level for child in [p.left, p.right] if child] quick iteration

103: can use two stacks

107: level always right direction, option to put value reverse or not

110: squeeze the returned parameter to 1

111: how to handle one size 0 more gracefully
case 1: both not 0, case 2, 3 one side zero
not min(h_left, h_right) + 1

112,113: return false when tree node is empty. Don't judge if root.left == None, let it to next round

114: the result is reversed pre-order. Add node from tail all the way to the head.

115: DP
m[i][0] = 1

116: recur one parameter, parent set the next of the right child
parent help child set next

117: again parent help child join the next

119: add reversely

123: main.py is optimal and cleanest

131: palindrome substring precompute + DP
132: case empty

133: empty case

145: reverse stack approach

146: sub function of del_val and put_val

148: base case of zero or one node
split needs to disconnect and break the LL

149: inner look only check up to i to save some iterations
Why the anchor point is the end of the segment
CORNER CASE: vertical and same coordinate. 

150: negative division ambiguity

151: split() function split multiple spaces
inplace, trigger point, space or at the end of string

152: Don't forget to compare num itself
tmp = [maxprod * num, minprod * num, num]
minprod, maxprod = min(tmp), max(tmp)

153: end condition is num[li] <= num[hi], which means it is sorted already
hi = mid is ok, but li = mid might cause inf loop
search for an inverse interval

154: change ending condition
try to find the decreasing pattern

156: awesome idea, when left tree is rotated, we have the new root for left tree, 
but the rightmost node is still attached with root

The right node is always either leaf node or empty. So we don't attach the right tree
but single node

159: last index map. map size at most 2, if bigger, needs to pop first seen char
Good question, needs revisit
# Find min value with certain criteria
rm_ch = min(last_map, key=last_map.get)

160: trick of restarting from head

162: li < hi,
compare num[mid] and num[mid + 1]

163: insert lower - 1 and higher + 1

164: VERY good question
The key point is to design a proper bucket gap 
so that it is guaranteed to have a empty bucket.
Then we only need to check between two buckets which
has values. Check max of one bucket and min of another


165: iteration for max(len1, len2)

166: break loop when enumerator seen again, not quotation digit seen again.
Other wise case like 5/9999 (small/very big) will break loop prematurely
q, a = a * 10 / b, a * 10 % b 

169: ballot count algorithm

170: corner case of two equal number sum to target
trade off of add/find

173: min step solution
root is like the right child of imaginry root
if self.stack:
    p = self.stack.pop().right
else:
    p = self.root

while p:
    self.stack.append(p)
    p = p.left

174: backwards and if min_blood is negative, mask it to be 1

179: all zeroes

187: rolling hash, can still be more efficient by changing to bit operation rather than * and % 4

188: revisit, still outer loop is stock price better
state array:
0: 1 buy 0 sell
1: 1 buy 1 sell ...

189: rotate mod, need to check if length 0, cannot mod 0

209: two pointer and sliding window, visit again

211: trie with search part different, recur on all child if ".", else you know where to go

213: look at the wrong solution. Sub problem should be
1. Don't rob -1
2. Rob -1

214: KMP, also review some more basic functions, startwith is faster than loop to compare
KMP string matching problem with S and S[::-1]

S: AABAAAD  -> AABAAD  -> B and A mismatch (use KMP here)
R: DAAABAA    DAAABAA

216: Backtracking (exponential)

218: MaxMap, a map which allows to get max value logN
Or a priority queue which allows to delete task or even more update the priority
the height is priority

219: K fixed window approach

220: very hard, pigeon theory. Bucket step size of t + 1, current window of K, the numbers in the window will NEVER
stay in the same bucket

If two value diff > t, then it can never be the same bucket.

221: DP, start from 1, 1

200-225: pretty tough

245: index list

247: calculate all filter last

248: revisit, similar approach as counting digit 1, more like a math
still needs to enumerate all numbers

249: str as mask

254: DFS has problem of recomputing, but easier to code.
DP is still superior
Check next factor from start to sqrt(remain), 
This will early prune a lot of cases of not satisfying increasing sequence.
don't forget case of just remain
revisit

255: left tree parent stack, similar for verifying post-order
Case when stack top is equal, still pop and max with max_value

260: bit=xor ^ (xor & (xor-1)) extract last bit 1

261: use neighbor map as a dual to store visited. Pop from neighbor if all visited
if all visited, then neighbor map is all popped and will be empty

264: i, j, k approach

265: NK, keep most optimal two colors

266: two state set

267: permutation with duplicates 
two approaches, char_cnt or same char insert after

268: sum or xor trick

269: first diff and topo sort, use precede map

270: greate iteration approach using -inf and inf
Use two variables to store closest right and left parent

271: use ending special char better than splitting special char
VERY VERY TRICKY CORNER CASE
[""] and []
That's why we use end marker rather than delimiter, The delimiter cannot differentiate 
those two cases

272: implement two iterators and do like merge sort

275: mid = 0 case, last good version
NOTE: The search space is [0, max(cite)]

276: careful I did a subtraction wrong version

277: The algorithm goes left to right and should land at the person who
knows nobody on the right. The same goes right to left. Land at person knowing
nobody on the left.

The two candidates should be the same. Still need to check if all know him 

279: DP is op, Lagrange math solution also

280: trick of xor.

282: 
First, seems no need to store memory table. The result of recur(i) is not useful for the formula in 
first half

why load first number as prefix rather than just call
recur(0, "", 0, 1)
If does, we will end up something like -4 + 5 which is wrong

283: don't swap, update remaining zero at end
similar to 027
If swapped, then the swapped zero can be filed overwritten by another non-zero value. Not point
[SIMILAR] ARRAY swapping

287: one missing easier, can rest only appear once
one duplicate harder. Can duplicate multiple times

Why start from nums[0], see explanation
Important logic of first recurring element, the preceding of those two must be different. So we
know they are duplicated numbers

291: revisit
needs two mapping (pattern->word and word->pattern)
The question ask for bijection

302: use first bad version projection approach

305: union find with add and has extendsion

306: no backtrace here

354: Imagine W as the array index. Find some Doll[w1], Doll[w2] such that they are increasing in H
revisit
Funny that the width is not used at all after sorting.

355: Get top 10, 
Approach 1: get top 10 for each follower and user himself. Sub-optimal
Approach 2: Like merge sort a list, put most recent in the heap, pop and put next most recent.
Better use negative indexes. Tuple contains (data, queue_id, queue_negative_index)
revisit

357:
0-0: 1
1-9: 9
10-99: 9 * 9
100-999: 9*9*8. (ALL 0-999 unique digit - starting with zero)

358: bag and max remaining frequency.

359: last_index

362: deque of ts and map for counter
Careful: multiple hit at same ts
Followup: See API rate limiter and how to store data in smaller blobs

363: use insort, which insert and sort
m, small dimension
n, large dimension
m*m*n*log(n)

Update: can do better, it is two pointer problem if the values are all positive,
which is not in this question

364: trick, use negative depth

375: N^3 trivial N^2 very hard.
https://artofproblemsolving.com/community/c296841h1273742
Also, the logic of starting from mid element to split may not be right. How to prove??

376: greedy, the first two elements set the tone, starting to fall or starting to rise
Don't set the tone using the first two elements, not guaranteed.
Special case if the stack has only one element or zero.
First element guaranteed in the final result.

377: Different from coin change. Careful
Take the inside loop out is not correct.
Outside loop: target value,
inside: coin value

REVISIT!!!

Memory table is only one-d array.
To know O(target), we need to put differnet coin at last step,
convert to sub problems of O(target-c1), O(target-c2) .....

More like permutation. Combination is ordered permutation

Difference:
1. Permutation: when take coin k, the remaining can take whatever
2. Combination, when take coin k, the remaining can only take coin [1, k), otherwise there will be double counting.

378: Two counters, LT and LE

379: available set
All solution seems to favor loading large data structure during constructor call. Then all operations will be o(1)
Such as available set
bit array for each number
Available set make sense when most numbers are already taken. Otherwise the used set make sense

Another idea, if recycled number is preferred, can keep a local cache of recycled.

380/381: careful when the removed element is the last one in array. 

384: For each element, randomize to shuffle with one element after it (inclusive)

385: re.split

386: beautiful pre-order question

387: if two passes any way, use the cnt_map better than index_map

389: can use xor. Every element appears twice except one appear once

390: just operate on start and en

394: can simplify
[SIMILAR] Stack operator problem.
[ push to stack
] pop operator and calcuate the repeated string. And extend to top of stack
Initialize to [[]]


395: Interesting problem, Divide and conquer

Sliding window solves differently. Traditionally sliding window is good at maxing at certain count.

Here we need to limit the number of chars in the window. Try from 1 char to 26 char.

[SIMILAR] Sliding window questions:
Q3: i direct move
Q76: i move one by one. However, there is one optimization when sliding window only happen on the filtered indexes
see sol2
Q159: immediate move i
Q209: move one by one
Q239: a little different flavor. Not counting bag but descending order in window
Q358: Some flavour
Q438: Similar to Q76

396: boring math

397: math greedy, careful for case 3

398: sparse memory reservoir sampling

399: revisit, maybe DFS is better. DFS careful about visited state
Also solvable using union find

400: math problem. LogN

402: look at main_naive, it works, but slow
Stack approach is simpler, if k > 0 and current number smaller than top of stack, pop
Corner case: remain k, at the end,
Leading zeroes

403: DFS with memorization
DFS: Go backwards. Distance to destination
BFS and ITER: Go forwards, Distance from source

405: revisit, negative numbers easier using mask
negative number, convert signed to unsigned
and remove leading zeroes
Don't change to binary. use 16 mod directly

406: lambda -x[0], x[1]

407: Keep two disjoint set, lake and ocean
# How it works. The water goes up, Title turns from hill to water. Water join lake to ocean and join lake between
# each other too. The key idea is to count the number of lakes using union find algorithm.

# Sort the tiles by height. 
# height[i:j] are the same height, the current water level is height[i][2]
# which will be sumerged by next water level height[j][2]

# Add all tiles in height[i:j] to water. Do a union function if the neighbor is a water as well. 
# If neighbor is out of boundary, do a union with ocean (-1, -1)

Union find data structure with add function

REVISIT: There is a simplied heap solution

408: should use re.split("(\d+)
Corner case leading zero

410: binary search

411: not interesting. Enumerate all the abbreviation and for each abbreviation check each word in dictionary to see if
any conflict

413: i = j - 1

414: best solution of blindly add, then pop min (Similar to top K problem)

416: Basic question, 0-1 Knapsack problem
Probably the best solution is still DP. Can be reduced to 1D DP. The dimension of sum is still needed

417: Multiple source DFS (call DFS for each source) seems OK, can also use BFS. Seems no need for multiple source BFS
DFS we mark only once and if already marked, stop DFS.
Can we do:
DFS can also be optimized by call only on lowest point on each edge.
NO, WE CAN'T. there can be small valley where cannot connect to lowest point

418: revisit, main.py is the best solution, using the one pointer and mod l to get mapped into the concat string
i is cursor on reperated string. i increment by n each time. if i lands at the end of the word, that means
we can store the next space free (n slots stores all the words plus one space). We incre i by 1 and start
next line with the beginning of next string.

419: Got stuck, both upper and left empty

421: App1: For each number, precomupte prefix, and in main loop iterate each number and try to match the prefix

Trick solution: Question to ask
Bit 31, can the maxxor be 1, if it is move to bit 30. Can maxxor of b31:30 be 11. This can be checked linearly using set

Very tricky problem

422: boring question. Shape of matrix not necessarily square 

424: Follow up very tricky
The above code uses localMaxFreq to keep track the maximum frequency of each current window. However, if we think carefully, we can find that if localMaxFreq of window A >= localMaxFreq of window B, then the A window must have longer length than the B window, this is because since both window A and window B hold this property (the length of the window) - (the maximum frequency of the character in this window) > k, and if localMaxFreq of window A >= localMaxFreq of window B, then (the length of the window A) >= (the length of the window B) by simple algebra .

Hence, we only need to keep track of a globalMaxFreq to record the globally maximum frequency of each window what has been seen so far.

425: simple prefix

426: append also works. We use prepend for the problem converting

   r
 /   \
L     R

to r - L -R

444: Pretty open question (BFS topo sorting vs trick)

Approach 1: Pick in_degree zero and remove. Instead of randomly start searching for zero in degree among 
all node, we can improve this to BFS 
pick_and_remove.py and pq.py

Approach 2: DFS topo sorting is not so clean
topo_sort_dfs.py

Approach 3: Trick, a little adhoc here
trick.py

447: my writing of counting while updating is a little confusing. 
Explain, find combination (k, j) where k < j and increment count by 2 * count[dist]
(i, k, j) and (i, j, k)
N*2

448: stupid questions

449: just send preorder 
Two options at receiving end: sort to get inorder, and reuse the solution
OR
Insert based on the pre-order and the BST restrictions

450: revisit: how to search and delete same function


466: Multiple indexes ending at i can mark the closing of multiple copies of S2.

Not very important

Example
s2="ab"

s1="abacbacdbe" where segments of "ab", "abacb" and "abacbacdb" marks 1, 2, 3 copies of s2

A more complicated case

s1 = "bacba" where first b will be skipped
"acb" is first matching, then "acbab", then "acbabacb" forms the loop

also N2 has not much use

467: represent each sequence as start:len, update the maxlen
Tricky when does not count duplicates

468: 
1. Split and check length
2. check nonempty and all digit and range and leading zero for IPV4
3. check nonempty and a-f/A-F/digit and length no more than 4

469: check cross vector of all adjcent pairs of edges. All >= or all <=

470: rand2 and rand7 makes rand 14 and filter
or two rand7 makes rand49, do mod on rand40

471: Brute force DP with mt[i:j].
To optize, use k=(s+s)[1:-1].find(s, 1). (Find from index 1)
k is the min repeating substring!!!


472: sort the string and also use memorization
Corner case careful, must be at least one component
optimize: First check if remaining ALL string is in the dictionary.

473: i, and length[4]. Keep idea
1. Symmetric
2. Sort by reverse, try big one first

474: 3D-DP

475: for each house, find right most heater on the left of house

476: use mask of num_len

479: not very important, BF

480: PQ which allows removing, use idx as value and num[idx] as priority

[SIMILAR] Median

481: nothing special, start with A, B = [1, 2, 2], [1, 2]

483: math 
# k is the base and the representation is
# m bits of 1
# We then have
# (k**m - 1) / (k-1) = n
# m = log_k (n * k - n + 1)
# m needs to be integer

Not really newton approach there

484: Careful, simple case when last element is I
If it is D, we need to continue swapping until we found an I
Revisit

486: simple
[SIMILAR] Game theory questions. Corner case win or not in case of empty array


487: seg window algorithm
Keep memorization of last all one segments. For current 1, try to flip first or last.
For last all one segment, try to join with flipping one bit

OR:
Left/Right window optimal solution. Imagine each seg of 1, two 0 have a 0 length 1 segment between them
So two zeroes will flush both left and right window.
Easier to think about the sub problem of ending with each index rather than connecting left and right
At index i, right window is the continous 1 starting from i and go left until you hit zero
Left window is from that zero and go further left and how many 1 can you collect

488: Revisit. BFS level by level. Each level i is solution of using hand[:i]
Each element in the level represents (result, cnt), result is the result board and cnt is how many ball inserted.
How many balls inserted different from how many played.

For insertion, at the start of segment

489: revisit
few points, keep cleaned state and direction.
orient function. 
When call recurions, based on the current direction ,generate different sequences

491: Simple set expanding iteratino
set union
A | B

493: merge sort. 
Similar 315/327

494: 
main.py more straigtforward
dp.py see how to split two numbers to equal sum

[SIMILAR]
Math formula, add sign, revisit
Q282

496: stack

498: move(i, j, direction) function. Corner case is when you reach the edge. (Or when you are out of 
boundary, but less clean)

501: inorder and anchor

503: not a merge sort problem, stack and traverse twice.
The stack is non-decreasing
Monotonic stack, revisit

507: 0, 1 corner case

510: A little careful, parent not necessary left-child parent.

516: Palindrome questions, revisit

[SIMILAR]
Q5, Q131, 132, Q214
Q266, Q267, 
Q336
Q479, Q516

Q214: kmp VERY HARD
Q336: Seems hard, careful of corner cases. 
Picker longer one and find prefix/suffix where the remaining part is palin and the mirror
of prefix/suffix exists in dictionary.
Q479: Solvable using bruteforce, but there is crazy math solution
Q516: I thought about to get m[i:j], we can see if we need to use j,
If we use j, what is the first elemeent m[k] = m[j], then keep some first index map????
No need, it is covered by m[i+1:j] and we can check if m[i] == m[j] separately

518: Simple
[SIMILAR]
Coin change proble:
Q322, Q518
322 VS 518. init value: 1vs0, reduce: min vs sum
Q39, Q40, Q77, Q216, Q377
Q39: Use backtrack, don't DP, also try large element first. Try to put multiple occurance of some value at one time
Q40: Do counting
Q77: Different flavor here, do iteration with early pruning, simpler
Q216: backtracking or can do some memory table, more choices here, simpler one
Q377: Very simlar to Q322, it's just that 377 says sequence matters. One-D DP

519: Good question, revisit, see main.py how to make everything O(1)
virtual index, 
[0:total_0] holds the real index of the number still 0,
pick one randonly from the range and swap with [total_0-1]
See how to achieve both good memory footage and speed
Storing all the availables are expensive. Instead we store the used.
The map has the used one as key, and the value is the swapped in.

522: sort and try all pairs. N^2, boring question. Answer must be one of the strings
The answer must be a word
Sort strings by length reverse, the candidate will be unique string and it is not the sub seq of any string longer than it.

523: index accu sum mod
[Corner case] k = 0

524: boring, just check one by one and update with current optimal

525: similar to 523